{
  "hash": "87fee6344cdaf74fe6519bd08d088d0e",
  "result": {
    "markdown": "# **3** | Simon Feedback \n\nFirst, download the [Feedback.zip](PsychoPy/3. Feedback.zip) folder and unpack it, then open the folder and open the 'SimonEffect_feedback.psyexp' PsychoPy file. \n\nIn this experiment we are again increasing complexity but this time in an incremental fashion - we'll be adding to the Simon Effect from the last experiment. If you run the experiment from scratch you should see that it doesn't work properly - you'll need to fix it as you make changes below. The idea is that after each trial you should be told whether or not you responded correctly. In this experiment we are starting to introduce some very basic code - if you're not familiar with code **don't panic**. We'll introduce some simple snippets of code and you won't need to be an expert to make your own experiment do what you want. \n\n## What you learn\n\nThings are getting a little more complicated but we hope playing around here will teach you the following:\n\n* How to insert code components.\n* How to modify basic code and even write some of your own. \n* How to implement basic feedback. \n* Introduction into troubleshooting. \n\n## Things to change\n\nAs we said, the experiment is again looking at the Simon effect - there are 4 trials 2 congruent and 2 incongruent. But if you run the experiment you don't get the appropriate feedback! Let's make some changes so that it works and then experiment a bit further: \n\n1.\\ Try to get the feedback working!\n\n<div class='webex-solution'><button>Hint 1</button>\n\n\n\n\nYou will need to tell PsychoPy what a correct answer is! You can do this in the 'trial' routine, in the 'key_resp' component.\n\n\n\n\n</div>\n\n\n\n<div class='webex-solution'><button>Hint 2</button>\n\n\n\n\nThe correct response can't be static - rather you will have to reference to a column in the excel spreadsheet\n\n\n\n\n</div>\n\n\n\n<div class='webex-solution'><button>Answer</button>\n\n\n\n\nIn the 'trial' routine in the 'key_resp' component, go to the 'Data' tab and click 'Store correct'. In the 'Correct answer' box type `$answer`. The open the Excel file called 'trials' add a new column with the headin 'answer' in that column add the correct response expected for each trial. Save and close the excel document - reload it in the trials loop and run the experiment again.\n\n\n\n\n</div>\n\n\n2.\\ Change the colour and text of the feedback to anything you want. \n\n<div class='webex-solution'><button>Hint 1</button>\n\n\n\n\nLocate the code component in the 'Feedback' routine - open it up and see what you can understand.\n\n\n\n\n</div>\n\n\n\n<div class='webex-solution'><button>Hint 2</button>\n\n\n\n\nIn the code just try changing `fb_text =` and the `fb_col=` what colors does it recognise?\n\n\n\n\n</div>\n\n\n\n3.\\ Modify the experiment so that you have a time limit to respond in - can you then modify the feedback so it says 'Too slow!' if no response was given? (this can be tricky).\n\n<div class='webex-solution'><button>Hint 1</button>\n\n\n\n\nThis is a hard one - don't give up yet; try googling... seriously, learning how to find the solution to a coding problem yourself by using the internet is a useful skill and can be really satisfying.\n\n\n\n\n</div>\n\n\n\n<div class='webex-solution'><button>Hint 2</button>\n\n\n\n\nOk, ok - I'll help. Once you've set a timelimit on all components on the 'trial' routine you'll need to change some code. Instead of `if key_resp.corr:` try `if key_resp.corr == 1`. Then think about trying an `elseif` code line.\n\n\n\n\n</div>\n\n\n\n<div class='webex-solution'><button>Hint 3</button>\n\n\n\n\nStill a bit tricky, I get it. You can use `and` in `if` functions, you can also use not but that's expressed like `!=` which effectively means 'is not'.\n\n\n\n\n</div>\n\n\n\n<div class='webex-solution'><button>Answer</button>\n\n\n\n\nDon't give up - try the PsychoPy forums first!\n\n\n\n\n</div>\n\n\n\n<div class='webex-solution'><button>Real answer</button>\n\nIt's a tricky one and if you haven't coded before don't feel to disheartened if you didn't get it. You'll need the following code in the 'fb_code_2' component in the 'Begin Routine' tab:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif key_resp.corr == 1: \n  fb_text = \"Correct!\"\n  fb_col =\"green\"\nelif key_resp.corr == 0 and key_resp.keys != None:\n  fb_text = \"Wrong!\"\n  fb_col =\"red\"\nelif key_resp.corr == 0 and key_resp.keys == None:\n  fb_text = \"Too slow!\"\n  fb_col =\"black\"\n```\n:::\n\n\n\n\n</div>\n\n\n::: {.callout-caution collapse=\"true\"}\n## Caution\nWhen you are adding code that will define the content of text stimuli, as in this experiment, it's important that the code come before text component like this:\n\n\n![](images/txt_code_correct.png){width=\"600\"}\n\n\nNot after, like this: \n\n\n![](images/txt_code_incorrect.png){width=\"600\"}\n \n\nYou can move any component up or down by right clicking on the component and selecting any of the 'move' options, like this:\n\n\n![](images/move.png){width=\"300\"}\n\n:::\n\n\n## Test yourself\n\n\n\n\n**Question 1** | In a code chunk, is the name of the coding language used to programme PsychoPy?<br><br>____________________\n\n**Question 2** | What charachter is used to 'comment out' text? <br><br> \n\n* (A) &  \n* (B) #  \n* (C) *  \n* (D) %  \n\n\n\n\n<div class='webex-solution'><button>Explain this answer</button>\n\n\n\n\nWhen coding it's good practice to annotate your code so other people find it easier to understand and you will remember what you did better. Leave comments in code chunks within PsychoPy by using '#'\n\n\n\n\n</div>\n\n\n\n\n\n\n\n**Question 3** | What's the name of the property that you need to change to increase the number of repetitions that a loop will go through?<br><br>____________________\n\n\n\n\n\n\n\n\nIf you need help - speak to instructors in class, check the online guide or contact a member of staff via email.\n\n\n\n\n\n\n\n",
    "supporting": [
      "SimonFeedback_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}